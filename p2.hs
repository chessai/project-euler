{-# LANGUAGE BangPatterns #-}
{-# LANGUAGE OverloadedStrings #-}

{-# OPTIONS_GHC -O2 -fforce-recomp #-}

module Main (main) where

import Constrictor (foldlMap')
import Data.List.Extra (nubOrd)
import Data.Foldable
import Data.Text (Text)
import qualified Data.Text.IO as TIO
import qualified Chronos
import Data.Monoid (Sum(..))
import TextShow (showt)

phi, psi, sqrt5 :: Double
phi = (1 + sqrt5) / 2
psi = (1 - sqrt5) / 2
sqrt5 = sqrt 5

logPhi :: Double -> Double
logPhi !x = log x / log phi

reverseFib :: Int -> Double
reverseFib !i =
  let !fn = fromIntegral i :: Double
      !res = logPhi ((fn * sqrt5 + sqrt (5 * (fn ** 2) - 4)) / 2)
  in res

getk :: Int -> Int
getk !i = floor (reverseFib i / 3)

sumEven :: Int -> Int
sumEven !k' =
  let !k = fromIntegral k'
      !phi3 = phi ** 3
      !psi3 = psi ** 3
  in floor $
       (1 / sqrt5)
       * (   phi3 * ((1 - phi3 ** k) / (1 - phi3))
           - psi3 * ((1 - psi3 ** k) / (1 - psi3))
         )

main :: IO ()
main = do
  TIO.putStrLn (problem <> "\n")
  !(!ts, !a) <- Chronos.stopwatch solve
  TIO.putStrLn ("The answer is: " <> showt a)
  TIO.putStrLn ""
  TIO.putStrLn ("It took " <> Chronos.encodeTimespan (Chronos.SubsecondPrecisionFixed 6) ts <> " seconds to compute.")

solve :: IO Int
solve = do
  let !x = 4000000
  let !k = getk x
  pure (sumEven k)

newline, tab :: Text
newline = "\n"
tab = "    "

problem :: Text
problem = mconcat
  [ "Each new term in the Fibonacci sequence is generated by adding the previous two terms."
  , "By starting with 1 and 2, the first 10 terms will be:"
  , newline, newline, tab, tab, tab, tab
  , "1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ..."
  , newline, newline
  , "By considering the terms in the Fibonacci sequence whose values do not exceed four million,"
  , " find the sum of the even-valued terms."
  ]